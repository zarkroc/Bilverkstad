/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bilverkstad;

import static bilverkstad.WorkDonePriceEnum.*;
import java.io.IOException;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 * Garage shop GUI for adding vehicles to a garage
 * and updating work done and checking out vehicles.
 * @author Tomas Perers
 * @version 2017-01-10
 */
public class GarageShopGui extends javax.swing.JFrame
{
    GarageShop garage = new GarageShop();

    /**
     * Creates new form GarageShopGui
     */
    public GarageShopGui()
    {
        initComponents();
        if (garage.getReadyObjects() != null)
            updateTextArea(taVehiclesReady,garage.getReadyObjects());
        if (garage.getRepairObjects() != null)
            updateTextArea(taVehiclesToFix,garage.getRepairObjects());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAddVehicle = new javax.swing.JButton();
        btnAddWork = new javax.swing.JButton();
        btnAddVehicleAsReady = new javax.swing.JButton();
        btnInfoVehicle = new javax.swing.JButton();
        btnCheckoutVehicle = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        taVehiclesToFix = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        taVehiclesReady = new javax.swing.JTextArea();
        lblVehiclesToFix = new javax.swing.JLabel();
        laVehiclesReady = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnAddVehicle.setText("Add vehicle");
        btnAddVehicle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddVehicleActionPerformed(evt);
            }
        });

        btnAddWork.setText("Add done work");
        btnAddWork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddWorkActionPerformed(evt);
            }
        });

        btnAddVehicleAsReady.setText("Vehicle ready");
        btnAddVehicleAsReady.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddVehicleAsReadyActionPerformed(evt);
            }
        });

        btnInfoVehicle.setText("Info about vehicle");
        btnInfoVehicle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInfoVehicleActionPerformed(evt);
            }
        });

        btnCheckoutVehicle.setText("Check out vehicle");
        btnCheckoutVehicle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckoutVehicleActionPerformed(evt);
            }
        });

        taVehiclesToFix.setColumns(20);
        taVehiclesToFix.setRows(5);
        jScrollPane1.setViewportView(taVehiclesToFix);

        taVehiclesReady.setColumns(20);
        taVehiclesReady.setRows(5);
        jScrollPane2.setViewportView(taVehiclesReady);

        lblVehiclesToFix.setText("Vehicles being worked on");

        laVehiclesReady.setText("Vehicles ready");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAddVehicle, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddVehicleAsReady, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnInfoVehicle)
                    .addComponent(btnCheckoutVehicle)
                    .addComponent(btnAddWork, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(laVehiclesReady)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(lblVehiclesToFix))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(lblVehiclesToFix)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(laVehiclesReady)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 115, Short.MAX_VALUE)
                        .addComponent(btnAddVehicle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAddWork)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAddVehicleAsReady)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnInfoVehicle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCheckoutVehicle)
                        .addGap(126, 126, 126))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Adds a Vehicle when button is pushed.
     * @param evt ActionEvent
     */
    private void btnAddVehicleActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnAddVehicleActionPerformed
    {//GEN-HEADEREND:event_btnAddVehicleActionPerformed
        try {
            registerVehicle(garage);
        } catch (IOException ex) {
            Logger.getLogger(GarageShopGui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAddVehicleActionPerformed

    /**
     * Adds work to a Vehicle object when button is pushed.
     * @param evt ActionEvent
     */
    private void btnAddWorkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddWorkActionPerformed
        String mRegNumber = JOptionPane.showInputDialog("Input registration number");
        Vehicle mVehicle = garage.searchRepair(mRegNumber.toUpperCase());
        if (mVehicle != null)
            workDone(mVehicle);
        else
            JOptionPane.showMessageDialog(this,"Car Was not found");
    }//GEN-LAST:event_btnAddWorkActionPerformed

    /**
     * Moves a vehicle from repairing to ready when button is pushed
     * @param evt ActionEvent
     */
    private void btnAddVehicleAsReadyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddVehicleAsReadyActionPerformed
        String mRegNumber = JOptionPane.showInputDialog("Input registration number for pickup");
        Vehicle mVehicle = garage.searchRepair(mRegNumber.toUpperCase());
        if ( mVehicle != null)
        {
            garage.repair(mVehicle);
            JOptionPane.showMessageDialog(this,"Car " +mVehicle.getRegNumber() +" is ready");
        }
        else
            JOptionPane.showMessageDialog(this,"Car Was not found");
        updateTextArea(taVehiclesReady,garage.getReadyObjects());
        updateTextArea(taVehiclesToFix,garage.getRepairObjects());
    }//GEN-LAST:event_btnAddVehicleAsReadyActionPerformed
    
    /**
     * Prints information about a vehicle when button is pushed.
     * @param evt ActionEvent
     */
    private void btnInfoVehicleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInfoVehicleActionPerformed
        String regNumber = JOptionPane.showInputDialog("Input registration number to earch for");
        Vehicle vehicle = garage.searchVehicle(regNumber.toUpperCase());
        if (vehicle != null)
        {
            String outputMessage = printFormatting(vehicle);
            JOptionPane.showMessageDialog(this, outputMessage);
        }
        else
        {
            JOptionPane.showMessageDialog(this,"Car Was not found");
        }
    }//GEN-LAST:event_btnInfoVehicleActionPerformed
    /**
     * Checks out a vehicle when the Checkout button is pushed.
     * @param evt ActionEvent
     */
    private void btnCheckoutVehicleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckoutVehicleActionPerformed
        String mRegNumber = JOptionPane.showInputDialog("Input registration number for pickup");
        Vehicle mVehicle = garage.searchReady(mRegNumber.toUpperCase());
        if ( mVehicle != null)
        {
            garage.checkOut(mVehicle);
            JOptionPane.showMessageDialog(this, "The vehicle " 
                    +mVehicle.getRegNumber() +" has been checkout but the customer \n "
                            + "Total price: " +mVehicle.getCost() );
        }
        else
            JOptionPane.showMessageDialog(this,"Car Was not found");
        
        updateTextArea(taVehiclesReady,garage.getReadyObjects());
    }//GEN-LAST:event_btnCheckoutVehicleActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(GarageShopGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(GarageShopGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(GarageShopGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(GarageShopGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            @Override
            public void run()
            {
                new GarageShopGui().setVisible(true);
            }
        });
    }
    
    /**
     * Register a vehicle for repairs by calling the garage.addVehicle
     * and updateTextArea methods
     * @param garage object where information is stored.
     * @throws IOException 
     */
    private void registerVehicle(GarageShop garage) throws IOException
    {
        String mType = (String) JOptionPane.showInputDialog(null, "Vehicle type",
                "Choose the type of vehicle", JOptionPane.QUESTION_MESSAGE, null, new String[]
                {
                    "Car",
                    "MotorCycle",
                    "Truck",
                    "Trailer",
                    "Towedsled"
                }, "Car");
        String mRegNumber = JOptionPane.showInputDialog("Input registration number");
        Vehicle tempVehicle = garage.searchVehicle(mRegNumber.toUpperCase());
        if ( tempVehicle != null)
            JOptionPane.showMessageDialog(this,"Car already registered!");
        else
        {
            String mModelYear = JOptionPane.showInputDialog("Input model year");
            // If the input is not a number ask the user for a new input.
            while (true)
            {
                if (mModelYear.matches("[0-9]+"))
                {
                    break;
                }
                mModelYear = JOptionPane.showInputDialog("Input model year \nUse only numbers");
            }
            String mBrand = JOptionPane.showInputDialog("Input brand name");
            String mOwner = JOptionPane.showInputDialog("Input owner (Name Sirname)");
            Vehicle mVehicle = null;
            switch (mType)
            {
                case "Car":
                    mVehicle = new Car(mRegNumber, mBrand, mOwner, mModelYear, mType);
                    break;
                case "MotorCycle":
                    mVehicle = new MotorCycle(mRegNumber, mBrand, mOwner, mModelYear, mType);
                    break;
                case "Truck":
                    mVehicle = new Truck(mRegNumber, mBrand, mOwner, mModelYear, mType);
                    break;
                case "Trailer":
                    mVehicle = new Trailer(mRegNumber, mBrand, mOwner, mModelYear, mType);
                    break;
                case "Towedsled":
                    mVehicle = new TowedSled(mRegNumber, mBrand, mOwner, mModelYear, mType);
                    break;
            }
                garage.addVehicle(mVehicle);
                updateTextArea(taVehiclesToFix,garage.getRepairObjects());
                JOptionPane.showMessageDialog(this,"Car " +mVehicle.getRegNumber() +" has been registered");
        }
        String message = "Continue to register Vehicles?";
        String title = "Continue registration?";
        int reply = JOptionPane.showConfirmDialog(null, message, title, JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION)
        {
            registerVehicle(garage);
        }        
    }
    
    /**
     * Gives the user an option to choose what work should be added to object
     * Calls method garage.addCost
     * @param mVehicle Vehicle object
     */
    private void workDone(Vehicle mVehicle)
    {
        String mType = (String) JOptionPane.showInputDialog(null, "Done work typ",
                "Choose what work has been done", JOptionPane.QUESTION_MESSAGE, null, new String[]
                {
                    "Premium Service",
                    "Medium Service",
                    "Budget Service",
                    "Paint Car",
                    "Change Tires",
                }, "Budget Service");
        garage.addCost(mVehicle, mType);
        JOptionPane.showMessageDialog(this,"Work " +mType +" has been added to the vehicle " +mVehicle.getRegNumber());
        String message = "Continue to register work?";
        String title = "Continue registration?";
        int reply = JOptionPane.showConfirmDialog(null, message, title, JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION)
        {
            workDone(mVehicle);
        }
    }
    
    /**
     * Formatting of output
     * @param vehicle Object to gather information from
     * @return String outputMessage
     */
    private static String printFormatting(Vehicle vehicle)
    {
        String outputMessage = vehicle.getType().concat(": ").concat(vehicle.getBrand().concat(" ")
                .concat(vehicle.getRegNumber()).concat("\n").concat("Year model: ").concat(vehicle.getModelYear()).concat("\n")
                .concat("Owner: ").concat(vehicle.getOwner()).concat("\n")
                .concat("Milage: ").concat(Integer.toString(vehicle.getMilage())).concat(" miles \n")
                .concat("Handed in: ").concat(vehicle.getFormattedDate()).concat("\n")
                .concat("Repair time: ").concat(Integer.toString(vehicle.getRepairTime())).concat(" days \n")
                .concat(vehicle.getServiceLevel()).concat("is recommeded \n"))
                .concat("Total cost: ").concat(Long.toString(vehicle.getCost())).concat(" kr");
        return outputMessage;
    }
    
    /**
     * Updates the text area with new information.
     * @param ta TextArea object to update on.
     * @param vehicleList List to gather information from
     */
    private static void updateTextArea(javax.swing.JTextArea ta, List vehicleList)
    {
        ta.setText("");
        Iterator<Vehicle> vehiclesIterator = vehicleList.iterator();
        String message = "";
        while (vehiclesIterator.hasNext()) {
            Vehicle mVehicle = vehiclesIterator.next();
            message = message.concat(mVehicle.getRegNumber().concat(" ").concat(mVehicle.getType())).concat("\n");
        }
        ta.append(message);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddVehicle;
    private javax.swing.JButton btnAddVehicleAsReady;
    private javax.swing.JButton btnAddWork;
    private javax.swing.JButton btnCheckoutVehicle;
    private javax.swing.JButton btnInfoVehicle;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel laVehiclesReady;
    private javax.swing.JLabel lblVehiclesToFix;
    private javax.swing.JTextArea taVehiclesReady;
    private javax.swing.JTextArea taVehiclesToFix;
    // End of variables declaration//GEN-END:variables
}
